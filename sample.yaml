# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on: [push, pull_request]

env:
  TIME_ZONE: 'Asia/Singapore'
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: scriberabbit-beta-dev
  GKE_ZONE: asia-southeast1-a
  DEPLOYMENT_NAME: gke-test
  IMAGE: static-site
  
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        
    - name: Setup gcloud CLI for docker build and push
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}
        
    - name: Auth for using GKE and GCR
      run: |
        gcloud --quiet auth configure-docker
        
    - name: Get the GKE credentials to deploy the cluster
      uses: google-github-actions/get-gke-credentials@v0.2.1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}
        
    - name: Build the Docker image
      env:
        ENV_MODE: ''
      run: |
        docker build -t ${{ secrets.BUILD_INSTANCE }} \
        --build-arg user=${{ env.POSTGRES_USERNAME }} \
        --build-arg pass=${{ env.POSTGRES_PASSWORD }} \
        --build-arg host=${{ secrets.PG_HOST_PRIVATE_IP }} \
        --build-arg db=${{ env.POSTGRES_DB}} \
        --build-arg env=${{ env.ENV_MODE }} . 
        
    - name: Push the Docker image to Google Container Registry
      run: |
        docker push ${{ secrets.BUILD_INSTANCE }}
        
  migrations:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports: [ '5432:5432' ]
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest alembic
          pip install -r backend/requirements.txt
      
      - name: Setup database
        run: |
          sudo kill -9 $(sudo lsof -t -i:5432)
          sudo service postgresql start
          sudo service postgresql status
          pg_lsclusters
          pg_isready --port=5432
          sudo -u postgres psql -U postgres -d postgres -c "alter user postgres with password '12345678';"
      - name: Create user
        run: |
          sudo -u postgres psql --command="CREATE USER test PASSWORD '12345678'" --command="\du"
          pg_isready --port=5432
      - name: Create timetable database
        run: |
          pg_isready --port=5432
          sudo -u postgres createdb --owner=postgres workspace
          PGPASSWORD=12345678 psql --username=postgres --host=localhost --list workspace

      - name: Run migrations
        env:
          POSTGRES_HOST: localhost
          POSTGRES_USERNAME: test
          POSTGRES_PASSWORD: 12345678
          POSTGRES_DB: workspace
        run: |
          cd backend
          alembic upgrade head
          python -m pytest